services:
  nginx:
    build:
      context: .
      dockerfile: ./docker/production/nginx/Dockerfile
    image: aris1991/laravel-api:nginx
    restart: unless-stopped
    # volumes:
    #   - laravel-storage-production:/var/www/storage:ro
    #   - ./certbot/conf:/etc/letsencrypt
    #   - ./certbot/www:/var/www/certbot
    networks:
      - production-network
    ports:
      - "80:80"
      - "443:443"
    env_file:
      - .env
    stdin_open: true
    tty: true
    depends_on:
      php-fpm:
        condition: service_healthy

  php-fpm:
    # For the php-fpm service, we will create a custom image to install the necessary PHP extensions and setup proper permissions.
    build:
      context: .
      dockerfile: ./docker/production/php-fpm/Dockerfile
      target: production # Use the 'production' stage in the Dockerfile
    restart: unless-stopped
    image: aris1991/laravel-api:php-fpm
    # volumes:
    #   - laravel-storage-production:/var/www/storage # Mount the storage volume
    env_file:
      - .env
    ports:
      - "9000:9000"
    networks:
      - production-network
    healthcheck:
      test: ["CMD-SHELL", "php-fpm-healthcheck || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    # The 'depends_on' attribute with 'condition: service_healthy' ensures that
    # this service will not start until the 'mysql' service passes its health check.
    # This prevents the application from trying to connect to the database before it's ready.
    # depends_on:
    #   mysql:
    #     condition: service_healthy

  # The 'php-cli' service provides a command-line interface for running Artisan commands and other CLI tasks.
  # -----------------------------------------------------------
  # This is useful for running migrations, seeders, or any custom scripts.
  # It shares the same codebase and environment as the 'php-fpm' service.
  # -----------------------------------------------------------
  php-cli:
    build:
      context: .
      dockerfile: ./docker/production/php-cli/Dockerfile
    image: aris1991/laravel-api:php-cli
    tty: true # Enables an interactive terminal
    stdin_open: true # Keeps standard input open for 'docker exec'
    env_file:
      - .env
    networks:
      - production-network

  # mysql:
  #   image: mysql:8.3
  #   restart: unless-stopped
  #   ports:
  #     - "3306:3306"
  #   environment:
  #     - MYSQL_DATABASE=${DB_DATABASE}    # optional
  #     - MYSQL_ROOT_PASSWORD=${DB_PASSWORD}
  #     - MYSQL_PASSWORD=${DB_PASSWORD}
  #   # volumes:
  #   #    - mysql-data-production:/var/lib/mysql
  #   networks:
  #     - production-network
  #   # Health check for MySQL
  #   # -----------------------------------------------------------
  #   # Health checks allow Docker to determine if a service is operational.
  #   # The 'mysqladmin ping' command checks if MySQL is ready to accept connections.
  #   # This prevents dependent services from starting before the database is ready.
  #   # -----------------------------------------------------------
  #   healthcheck:
  #     test: ["CMD", "mysqladmin", "-u$MYSQL_USER", "-p$DB_PASSWORD", "ping", "-h", "localhost"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # redis:
  #   image: redis:alpine
  #   restart: unless-stopped # Automatically restart unless the service is explicitly stopped
  #   networks:
  #     - production-network
  #   # Health check for Redis
  #   # -----------------------------------------------------------
  #   # Checks if Redis is responding to the 'PING' command.
  #   # This ensures that the service is not only running but also operational.
  #   # -----------------------------------------------------------
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 5s
      # retries: 3
      

networks:
  # Attach the service to the 'production-network' network.
  # -----------------------------------------------------------
  # This custom network allows all services within it to communicate using their service names as hostnames.
  # For example, 'php-fpm' can connect to 'mysql' by using 'mysql' as the hostname.
  # -----------------------------------------------------------
  production-network:

volumes:
  mysql-data-production:
  laravel-storage-production: