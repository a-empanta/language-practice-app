services:
  web:
    build:
      context: .
      dockerfile: ./docker/development/nginx/Dockerfile
    ports:
      # Map port 80 inside the container to the port specified by 'NGINX_PORT' on the host machine
      - "80:80"
    environment:
      - NGINX_HOST=localhost
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - language-practise

  php-fpm:
    # For the php-fpm service, we will create a custom image to install the necessary PHP extensions and setup proper permissions.
    build:
      context: .
      dockerfile: ./docker/development/php-fpm/Dockerfile
      target: development
      args:
        XDEBUG_ENABLED: ${XDEBUG_ENABLED:-true}
        XDEBUG_MODE: develop,coverage,debug,profile
        XDEBUG_HOST: ${XDEBUG_HOST:-host.docker.internal}
        XDEBUG_IDE_KEY: ${XDEBUG_IDE_KEY:-DOCKER}
        XDEBUG_LOG: /dev/stdout
        XDEBUG_LOG_LEVEL: 0
    command: >
      sh -c "
        php artisan route:clear &&
        php artisan config:clear &&
        php artisan cache:clear &&
        php artisan view:clear &&
        php-fpm -F
      "
    env_file:
      - .env
    volumes:
      - ./laravel-api:/var/www
    networks:
      - language-practise
    depends_on:
      mysql:
        condition: service_healthy 

  php-cli:
    build:
      context: .
      dockerfile: ./docker/development/php-cli/Dockerfile
      args:
        UID: ${UID:-1000}
        GID: ${GID:-1000}
        XDEBUG_ENABLED: ${XDEBUG_ENABLED:-true}
        XDEBUG_MODE: develop,coverage,debug,profile
        XDEBUG_HOST: ${XDEBUG_HOST:-host.docker.internal}
        XDEBUG_IDE_KEY: ${XDEBUG_IDE_KEY:-DOCKER}
        XDEBUG_LOG: /dev/stdout
        XDEBUG_LOG_LEVEL: 0
    ports:
      - '${VITE_PORT:-5172}:5172'
    tty: true  # Enables an interactive terminal
    stdin_open: true  # Keeps standard input open for 'docker exec'
    env_file:
      - .env
    volumes:
      - ./laravel-api:/var/www
    networks:
      - language-practise

  mysql:
    image: mysql:8.3
    restart: unless-stopped
    ports:
      - "3306:3306"
    environment:
      - MYSQL_DATABASE=${DB_DATABASE}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${DB_PASSWORD}
    volumes:
       - mysql-data:/var/lib/mysql
    networks:
      - language-practise
    # Health check for MySQL
    # -----------------------------------------------------------
    # Health checks allow Docker to determine if a service is operational.
    # The 'mysqladmin ping' command checks if MySQL is ready to accept connections.
    # This prevents dependent services from starting before the database is ready.
    # -----------------------------------------------------------
    healthcheck:
      test: ["CMD", "mysqladmin", "-u$MYSQL_USER", "-p$DB_PASSWORD", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    networks:
      - language-practise

  frontend:
    build:
      context: .
      dockerfile: ./docker/development/react/Dockerfile
    ports:
      - "5173:5173"
    stdin_open: true
    tty: true
    env_file:
      - .env
    networks:
      - language-practise
    volumes:
      - ./frontend:/app
    command: sh -c "npm install && npm run dev -- --host 0.0.0.0"

  fast-api:
    build:
      context: .
      dockerfile: ./docker/development/fast-api/Dockerfile
    ports:
      - "8000:8000"
    env_file:
      - .env
    stdin_open: true
    tty: true
    networks:
      - language-practise
    volumes:
      - ./fast-api:/app

networks:
  language-practise:

volumes:
  mysql-data: